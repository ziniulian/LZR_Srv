<!DOCTYPE html>
<html>
	<head>
		<title>T+0</title>
		{{#def.meta}}

		<script type="text/javascript" src="/comLib/echarts.js"></script>
		<script type="text/javascript" src="/myLib/LZR.js"></script>

		<style type="text/css">
			.boso {
				width: 100%;
				height: 100%;
			}
			.chart {
				display: inline-block;
				width: 80%;
				height: 100%;
			}
			.list {
				display: inline-block;
				width: 20%;
				height: 100%;
				overflow-y: auto;
				overflow-x: hidden;
				font-size: 0.7rem;
			}
			.scd {
				background-color: #0FF;
			}
			.flash {
				right: 10rem;
				bottom: 3rem;
				width: 2.2rem;
				height: 1.2rem;
				border-radius: 3rem 0;
				opacity: 0;
				position: absolute;
				background-color: #0A0;
				animation: flashNam 2s 1;
			}
			@keyframes flashNam {
				100% {
					right: 0;
					bottom: 0;
					width: 0;
					height: 0;
					opacity: 1;
					transform: rotate(720deg);
				}
			}
			.out {
				position: relative;
				height: calc(100% - 5rem);
			}
			.logo {
				margin-bottom: 0.2rem;
			}
			.sfs {
				font-size: 0.6rem;
			}
			.frm {
				position: absolute;
				top: 0;
				right: 20%;
				width: 35%;
				height: 100%;
				border: none;
			}
		</style>
	</head>

	<body>
		<div id="boso" class="boso">
			<div class="logo">
				&nbsp; &nbsp; <input id="sidDom" type="text" placeholder="请输入代码，并按回车键" onchange="dco.reset();"></input>
				&nbsp; &nbsp; <a id="barDom" href="javascript: dco.run();">开始</a>
				&nbsp; &nbsp; <a href="javascript: dco.sav();">保存</a>
				<a class="logohome" target="_blank" href="/"></a>
			</div>

			<div class="out">
				<div id="chartDom" class="chart"></div>
				<div id="listDom" class="list"><table><tbody id="tDom"></tbody></table></div>
				<!-- <iframe id="frmDom" class="Lc_nosee" src="https://jy.xzsec.com/Login"></iframe> -->
			</div>
			<div><table>
				<tbody class="sfs"><tr>
					<td id="tpDom">--</td>
					<td id="tvDom">--</td>
					<td id="thDom">--</td>
					<td id="tzDom">--</td>
					<td id="trDom">--</td>
				</tr></tbody>
			</table></div>
			<div id="flashDom" class="Lc_nosee"></div>
		</div>
	</body>

	<script type="text/javascript">
		LZR.load([
			"LZR.Base.Time",
			"LZR.HTML.Base.Ajax"
		]);

		var dco = {
			stu: 0,	/* 状态：1：抓取成交量；2：时间判断；3：准备就绪；4：循环中。*/
			ajx: new LZR.HTML.Base.Ajax(),
			utJson: LZR.getSingleton(LZR.Base.Json),
			utTim: LZR.getSingleton(LZR.Base.Time),
			urlH: "/Gu/qrySinaK/",
			urlK: "/Gu/qrySinaK/s_sh000001,s_sz399001,s_sz131810,",
			urlS: "/Gu/savT0/",
			url: "",
			hr: document.createElement("hr"),
			tp: 0,	/*滚动条位置*/
			tim: 0,	/*当日时间戳*/
			today: "",	/*当天日期*/
			tmoHd: 0,	/*循环句柄*/
			id: "",
			sid: "",
			cv: [0,0,0,0,0,0,0],	/*图表补偿量*/
			cvd: 0.2,	/*补偿距离*/
			bdb: {
				p: 0,	/*当前价*/
				c: 0,	/*收盘价*/
				o: 0,	/*开盘价*/
				h: 0,	/*最高价*/
				l: 0,	/*最低价*/
				v: 0,	/*成交量*/
				w: 0,	/*总盘口*/
				m: 0,	/*最大卖五*/
				n: 0,	/*最小买五*/
				v5: 0,	/*近5日平均每日成交量*/
				vps: 0	/*近5日平均每秒成交量*/
			},
			db: [],	/*图表数据*/
			pt: {},	/*挂单列表*/
			t: undefined,	/*上一时刻的交易数据*/
			chart: undefined,	/*图表*/
			op: {	/*图表属性*/
				tooltip: {
					trigger: "axis",
					axisPointer: {
						type: "cross",
						crossStyle: {
							textStyle: {
								fontSize: 25
							}
						}
					}
				},
				grid: {
					left: "5%",
					right: "2%",
					top: "4%"
				},
				xAxis: {
					boundaryGap : true,
					data: []
				},
				yAxis: {
					scale: true,	/*脱离零轴*/
					splitArea: {
						show: true
					}
				},
				dataZoom: [
					{
						type: "inside",	/*鼠标数据区缩放拖拽功能*/
					},
					{
						show: true,
						type: "slider"
					}
				],
				color: ["#F0F", "#00F", "#F00", "#000", "#0FF", "#0F0", "#F91", "#AAA"],
				legend: {
					x: "right",
					data: ["价格", "盘口", "盘比", "量差", "上证", "深证", "量比"],
					selected: {
						"量比": false,
						"盘比": false,
						"量差": false,
					}
				},
				series: [
					{
						name: "价格",
						type: "line",
						data: []
					},
					{
						name: "盘口",
						type: "line",
						data: []
					},
					{
						name: "盘比",
						type: "bar",
						stack: "总量差",
						data: []
					},
					{
						name: "量差",
						type: "bar",
						stack: "总量差",
						data: []
					},
					{
						name: "上证",
						type: "line",
						data: []
					},
					{
						name: "深证",
						type: "line",
						data: []
					},
					{
						name: "量比",
						type: "line",
						data: []
					},
					{
						name: "T",
						type: "line",
						lineStyle: {
							normal: {
								color: "rgba(0,0,0,0)",
								width: 0
							}
						},
						data: []
					}
				]
			},

			init: function () {
				dco.today = dco.utTim.format(new Date(), "date2");
				dco.ajx.evt.rsp.add(dco.hd);
				dco.tp = Math.floor(listDom.clientHeight / 2);
				dco.tim = dco.utTim.getDayTimestamp();
				document.onkeyup = dco.key;

				/*图表 ， X轴数据*/
				dco.chart = echarts.init(chartDom);
				var i, t, d = dco.utTim.normalize(null, 9);
				d.setMinutes(15);
				dco.ctim = d.valueOf();
				t = dco.ctim;
				for (i = 0; i < 601; i ++) {
					d.setTime(t);
					dco.op.xAxis.data.push(dco.utTim.format(d, "hh:mm:ss"));
					t += 1000;
				}
				t += 300000;
				for (i = 0; i < 7200; i ++) {
					d.setTime(t);
					dco.op.xAxis.data.push(dco.utTim.format(d, "hh:mm:ss"));
					t += 1000;
				}
				t += 5400000;
				for (i = 0; i < 7200; i ++) {
					d.setTime(t);
					dco.op.xAxis.data.push(dco.utTim.format(d, "hh:mm:ss"));
					t += 1000;
				}
				dco.op.series[7].data[15000] = 0;

				/*图例事件*/
				dco.chart.on("legendselectchanged", function (p) {
					dco.op.legend.selected = p.selected;
				});

				/*防止不小心关闭页面*/
				window.onbeforeunload = function (e) {
					if (dco.db.length) {
						return true;
					}
				};

				dco.chart.setOption(dco.op);
			},

			/*键盘事件*/
			key: function (e) {
				switch (e.keyCode) {
					case 81:	/*Q，价格线上移*/
						dco.chgCv(0, dco.cvd, true);
						break;
					case 65:	/*A，价格线下移*/
						dco.chgCv(0, -dco.cvd, true);
						break;
					case 87:	/*W，盘口线上移*/
						dco.chgCv(1, dco.cvd, true);
						break;
					case 83:	/*S，盘口线下移*/
						dco.chgCv(1, -dco.cvd, true);
						break;
					case 69:	/*E，上证线上移*/
						dco.chgCv(4, dco.cvd, true);
						break;
					case 68:	/*D，上证线下移*/
						dco.chgCv(4, -dco.cvd, true);
						break;
					case 82:	/*R，深证线上移*/
						dco.chgCv(5, dco.cvd, true);
						break;
					case 70:	/*F，深证线下移*/
						dco.chgCv(5, -dco.cvd, true);
						break;
					case 86:	/*V，显示或隐藏柱状图*/
						dco.op.legend.selected["盘比"] = !dco.op.legend.selected["盘比"];
						dco.op.legend.selected["量差"] = !dco.op.legend.selected["量差"];
						dco.chart.setOption(dco.op);
						break;
					case 32:	/*空格，显示或隐藏交易页面*/
						/*if (frmDom.className === "frm") {
							frmDom.className = "Lc_nosee";
						} else {
							frmDom.className = "frm";
						}*/
						break;
					case 88:	/*X，显示或隐藏盘口线*/
						dco.op.legend.selected["盘口"] = !dco.op.legend.selected["盘口"];
						dco.chart.setOption(dco.op);
						break;
					case 77:	/*M，清空所有补偿*/
						for (var i = 0; i < dco.cv.length; i ++) {
							if (dco.cv[i]) {
								dco.chgCv(i, -dco.cv[i]);
							}
						}
						dco.chart.setOption(dco.op);
						break;
					case 90:	/*Z，显示或隐藏价格线*/
						dco.op.legend.selected["价格"] = !dco.op.legend.selected["价格"];
						dco.chart.setOption(dco.op);
						break;
					case 67:	/*C，量比切换*/
						if (dco.op.legend.selected["量比"]) {
							dco.op.legend.selected["量比"] = false;
							dco.op.legend.selected["价格"] = true;
							dco.op.legend.selected["盘口"] = true;
							dco.op.legend.selected["上证"] = true;
							dco.op.legend.selected["深证"] = true;
						} else {
							dco.op.legend.selected["量比"] = true;
							dco.op.legend.selected["价格"] = false;
							dco.op.legend.selected["盘口"] = false;
							dco.op.legend.selected["上证"] = false;
							dco.op.legend.selected["深证"] = false;
						}
						dco.chart.setOption(dco.op);
						break;
				}
			},

			stop: function (s) {
				dco.stu = s || 0;
				if (dco.tmoHd) {
					clearInterval(dco.tmoHd);
					dco.tmoHd = 0;
				}
				dco.ajx.abort();
				barDom.innerHTML = "开始";

				if (s === 0) {
					/*清空数据*/
					dco.bdb = {m: 0};
					dco.db = [];
					dco.pt = {};
					dco.t = undefined;
					for (var i = 0; i < 5; i ++) {
						dco.op.series[i].data = [];
					}
					dco.chart.setOption(dco.op);

					tDom.innerHTML = "";
					tpDom.innerHTML = "--";
					tvDom.innerHTML = "--";
					thDom.innerHTML = "--";
					tzDom.innerHTML = "--";
					trDom.innerHTML = "--";
					document.title = "T+0";
				}
			},

			run: function () {
				switch (dco.stu) {
					case 3:
						dco.stu = 4;
						dco.tmoHd = setInterval(dco.get, 2500);
						barDom.innerHTML = "停止";
						break;
					case 4:
						dco.stop(3);
						break;
				}
			},

			reset: function () {
				var id= sidDom.value;
				if (id.match(/^\d{6}$/)) {
					dco.stop(0);
					if (id[0] === "6") {
						dco.sid = "sh" + id;
					} else {
						dco.sid = "sz" + id;
					}

					dco.stu = 1;
					dco.id = id;
					dco.url = dco.urlK + dco.sid + "/";
					dco.ajx.asynPost(dco.urlH + dco.sid + "/5/");
					sidDom.blur();
				}
				sidDom.value = "";
			},

			hd: function (txt, status) {
				var i, d, o;
				if (txt.length && txt[0] === "{") {
					o = dco.utJson.toObj(txt);
				} else {
					/*dco.stop(3);*/	/*断网纠错*/
					return;
				}

				if (o.ok) {
					switch (dco.stu) {
						case 1:
							dco.bdb.v5 = 0;
							for (i = 0; i < o.dat.length; i ++) {
								dco.bdb.v5 += o.dat[i].volume - 0;
							}
							dco.bdb.vps = Math.round(dco.bdb.v5 / 75000);
							dco.bdb.v5 = dco.bdb.vps * 15000;

							dco.stu = 2;
							dco.get();
							break;
						case 2:
							o = o.dat.split(";");
							d = o[3].split(",");
							if ((d[30] === dco.today)) {
								dco.stu = 3;
								dco.bdb.c = d[2] - 0;
								dco.bdb.w = 0;
								document.title = d[0].substr(d[0].lastIndexOf("\"") + 1);
								dco.run();
							} else {
								console.log("Err：日期错误！");
								dco.stop();
							}
							break;
						case 4:
							o = o.dat.split(";");
							var t = o[3].split(",");
							i = dco.cid(t[31]);
							/*指数更新*/
							if (i > 599) {
								d = o[0].split(",");
								dco.fillOp(i, dco.op.series[4].data, dco.cv[4] ? Math.round((d[3] - 0 + dco.cv[4]) * 100) / 100 : d[3] - 0);
								thDom.innerHTML = d[3] + "/" + Math.round(d[1]);
								if (dco.cv[4]) {
									thDom.innerHTML += "," + dco.cv[4];
								}
								d = o[1].split(",");
								dco.fillOp(i, dco.op.series[5].data, dco.cv[5] ? Math.round((d[3] - 0 + dco.cv[5]) * 100) / 100 : d[3] - 0);
								tzDom.innerHTML = d[3] + "/" + Math.round(d[1]);
								if (dco.cv[5]) {
									tzDom.innerHTML += "," + dco.cv[5];
								}
								d = o[2].split(",");
								trDom.innerHTML = d[1];
								if (((d[1] - 0) > 2.7) && (flashDom.className !== "flash")) {
									flashDom.className = "flash";
									setTimeout(function () {
										flashDom.className = "Lc_nosee";
									}, 1200);
								}
							}
							if (!dco.db[i] && (i > 0)) {
								dco.flush(i, t);
							}
							break;
					}
				} else {
					console.log("Err：连接失败！");
					dco.stop();
				}
			},

			/*计算时间id*/
			cid: function (s) {
				var t = s.split(":");
				var i = t[2] - 33300 + t[0] * 3600 + t[1] * 60;
				if (i > 600) {
					if (i > 900) {
						i -= 300;
						if (i > 7800) {
							if (i > 13200) {
								i -= 5400;
								if (i > 15000) {
									if (i < 15300) {
										i = 15000;
									} else {
										i = -1;
									}
								}
							} else {
								i = 7800;
							}
						}
					} else {
						i = 600;
					}
				}
				return i;
			},

			flush: function (i, s) {
				var v, j, k, m, n, t = {
					id: i,
					p: s[3] - 0,
					v: s[8] - 0,
					g: [
						[s[29] - 0, s[28] - 0],
						[s[27] - 0, s[26] - 0],
						[s[25] - 0, s[24] - 0],
						[s[23] - 0, s[22] - 0],
						[s[21] - 0, s[20] - 0],
						[s[11] - 0, s[10] - 0],
						[s[13] - 0, s[12] - 0],
						[s[15] - 0, s[14] - 0],
						[s[17] - 0, s[16] - 0],
						[s[19] - 0, s[18] - 0]
					]
				};
				if (dco.t && dco.t.p && dco.pt[dco.t.p]) {
					dco.pt[dco.t.p].doe.className = "";
				}

				if (t.g[4][0] !== t.g[5][0]) {
					if (!dco.bdb.o) {
						dco.bdb.o = s[1] - 0;
					}
					dco.bdb.p = t.p;
					dco.bdb.h = s[4] - 0;
					dco.bdb.l = s[5] - 0;
					dco.bdb.v = t.v;
					dco.db[i] = [
						Math.round(t.p / dco.bdb.c * 10000 - 10000) / 100,
						dco.t ? t.v - dco.t.v : t.v
					];

					/*挂单列表*/
					n = 0;
					for (j = 9; j >= 0; j --) {
						if (t.g[j][0]) {
							m = t.g[j][0];
							if (!n) {
								n = m;
								if (!dco.bdb.n || n < dco.bdb.n) {
									dco.bdb.n = n;
								}
							}
							k = (j < 5 ? -1 : 1);	/*状态：（-1：卖，1：买）*/

							v = dco.pt[m];
							if (v) {
								if ((m < dco.t.g[4][0] ? 1 : -1) === k) {
									v[2] = t.g[j][1] - v[0];
									if (v[2] < 0) {
										v[3] = v[2] * k;
									} else {
										v[3] = 0;
									}
								} else {
									v[2] = t.g[j][1] + v[0];
									v[3] = v[0] * k;
								}
								v[0] = t.g[j][1];
								v[1] = k;
								v[4] = 1;
							} else {
								dco.addTd(m, [t.g[j][1], k, t.g[j][1], 0, 1]);	/*量、状态、量差、缺少的量、修改标记*/
							}
						}
					}

					/*本时刻的买五卖五范围*/
					t.m = m;
					t.n = n;
					if (m > dco.bdb.m) {
						dco.bdb.m = m;
					}

					/*补充本次价格范围间的所有挂单数据*/
					k = 0;
					v = 0;
					for (j = t.n; j <= t.m; j += 0.01) {
						j = Math.round(j * 100) / 100;
						if (dco.pt[j]) {
							if (dco.pt[j][4]) {
								dco.pt[j][4] = 0;
							} else {
								dco.pt[j][1] = j < t.g[4][0] ? 1 : -1;
								dco.pt[j][2] = -dco.pt[j][0];
								dco.pt[j][3] = dco.pt[j][0] * (j < dco.t.g[4][0] ? -1 : 1);
								dco.pt[j][0] = 0;
							}
							dco.pt[j].v.innerHTML = dco.pt[j][0] ? Math.floor(dco.pt[j][0] / 100) : "";
							dco.pt[j].m.innerHTML = dco.pt[j][2] ? Math.floor(dco.pt[j][2] / 100) : "";

							if (dco.pt[j][3]) {
								/*盘口数据统计*/
								v += dco.pt[j][3];
								k += Math.abs(dco.pt[j][3]);
							}
						} else {
							dco.addTd(j, [0, (j < t.g[4][0] ? 1 : -1), 0, 0, 0]);
						}
					}

					/*盘口计算*/
					if (dco.t) {
						j = v;
						v = t.v - dco.t.v;
						if (v) {
							if (k > v) {	/*本次挂单缺失的总量 > 本次增加的成交量*/
								if (t.p > dco.t.p) {
									m = t.p;
									n = dco.t.p;
								} else {
									n = t.p;
									m = dco.t.p;
								}

								/*统计上一次成交价和本次成交价之间的盘口盘口数据*/
								var w = 0;
								k = 0;
								for (j = n; j <= m; j += 0.01) {
									j = Math.round(j * 100) / 100;
									w += dco.pt[j][3];
									k += Math.abs(dco.pt[j][3]);
								}

								if (k < v) {	/*若，两次成交量间的缺失总量 < 本次成交总量 ...
												否则，两次成交价间的盘口变化无论是否真实成交，都全部计入总盘口*/
									/*分别向当前价上下两侧的相邻价位搜索，累积盘口数据，直至满足以下任一条件时截止：
										1. 缺失总量 >= 本次总成交量，
										2. 相邻价位的挂单量无缺失*/
									j = (t.p > dco.t.p) ? 0.01 : -0.01;
									while (m || n) {
										if (j > 0 && m) {
											m = Math.round((m + j) * 100) / 100;
											if (dco.pt[m][3]) {
												u = m;
											} else if (dco.pt[m][0]) {
												m = 0;
												u = 0;
											} else {
												u = 0;
											}
										} else if (n) {
											n = Math.round((n + j) * 100) / 100;
											if (dco.pt[n][3]) {
												u = n;
											} else {
												n = 0;
												u = 0;
											}
										}
										if (u) {
											k += Math.abs(dco.pt[u][3]);
											w += dco.pt[u][3];
											if (k > v) {
												j = k - v;
												if (dco.pt[u][3] > 0) {
													w -= j;
												} else {
													w += j;
												}
												break;
											} else if (k === v) {
												break;
											}
										}
										j = -j;
									}
								}
								dco.db[i][2] = w;
							} else {
								dco.db[i][2] = j;
							}
							dco.bdb.w += dco.db[i][2];	/*盘口数据汇总*/
						}

						/*清空上次更新的旧数据信息*/
						if (t.m < dco.t.m) {
							for (j = dco.t.m; j > t.m; j -= 0.01) {
								j = Math.round(j * 100) / 100;
								dco.clTd(j, t.g[4][0]);
							}
						}
						if (t.n > dco.t.n) {
							for (j = dco.t.n; j < t.n; j += 0.01) {
								j = Math.round(j * 100) / 100;
								dco.clTd(j, t.g[4][0]);
							}
						}
					}

					tpDom.innerHTML = dco.db[i][0];
					if (dco.cv[0]) {
						tpDom.innerHTML += "," + dco.cv[0];
					}
					/*分隔线 + 挂单列表滚动条定位*/
					tDom.insertBefore(dco.hr, dco.pt[t.g[5][0]].doe);
					dco.pt[t.p].doe.className = "scd";
					if (dco.hr.offsetTop > dco.tp) {
						listDom.scrollTo(0, dco.hr.offsetTop - dco.tp);
					} else {
						listDom.scrollTo(0, 0);
					}
				} else if (t.g[5][1]) {
					/*集合竞价*/
					if (i < 300) {
						dco.db[i] = [
							Math.round(t.g[5][0] / dco.bdb.c * 10000 - 10000) / 100,
							t.g[5][1]
						];
						tvDom.innerHTML = Math.floor(t.g[5][1] / 100);
					} else {
						t.v += t.g[5][1];
						dco.db[i] = [
							Math.round(t.g[5][0] / dco.bdb.c * 10000 - 10000) / 100,
							dco.t ? t.v - dco.t.v : t.v
						];

						/*盘口计算*/
						if (dco.t && (dco.t.g[4][0] === dco.t.g[5][0])) {
							if (t.g[5][0] > dco.t.g[5][0]) {
								dco.db[i][2] = dco.db[i][1];
							} else if (t.g[5][0] < dco.t.g[5][0]) {
								dco.db[i][2] = -dco.db[i][1];
							} else {
								dco.db[i][2] = t.g[6][1] - t.g[3][1] - dco.t.g[6][1] + dco.t.g[3][1];
							}
							dco.bdb.w += dco.db[i][2];
						}
					}
					tpDom.innerHTML = dco.db[i][0] + "/" + t.g[5][0];
				} else {
					return;
				}

				if (dco.t && i > 300) {
					k = i - dco.t.id;
					v = dco.db[i][1] / k / dco.bdb.vps;
					if (v > 2.8) {
						j = dco.db[i][2] / k / dco.bdb.vps;
						if (j < 0) {
							v = - v - j;
							if (v > 0) {
								v = 0;
							}
						} else {
							v -= j;
						}
						dco.fillOp(i, dco.op.series[2].data, Math.round((j + dco.cv[2]) * 100) / 100);
						dco.fillOp(i, dco.op.series[3].data, Math.round((v + dco.cv[3]) * 100) / 100);
					} else {
						dco.fillOp(i, dco.op.series[2].data, 0);
						dco.fillOp(i, dco.op.series[3].data, 0);
					}
					dco.fillOp(i, dco.op.series[1].data, Math.round(dco.bdb.w / dco.bdb.v5 * 100000 + dco.cv[1] * 1000) / 1000);
				}

				dco.fillOp(i, dco.op.series[0].data, dco.cv[0] ? Math.round((dco.db[i][0] + dco.cv[0]) * 100) / 100 : dco.db[i][0]);
				if (t.v) {
					v = Math.round(t.v / i / dco.bdb.vps * 1000 - 1000) / 1000;
					dco.fillOp(i, dco.op.series[6].data, dco.cv[6] ? Math.round((v + dco.cv[6]) * 100) / 100 : v);
					tvDom.innerHTML = v + "/" + Math.floor(t.v / 100);
					if (dco.cv[1]) {
						tvDom.innerHTML += "," + dco.cv[1];
					}
				}
				dco.chart.setOption(dco.op);
				dco.t = t;
			},

			/*填充图表数据*/
			fillOp: function (i, d, v) {
				if (!isNaN(v)) {
					d[i] = v;
					for (j = i - 1; j >= 0; j --) {
						if (!isNaN(d[j])) {
							v = d[j];
							for (j++; j < i; j ++) {
								d[j] = v;
							}
							break;
						}
					}
				}
			},

			/*获取数据*/
			get: function () {
				if ((dco.stu === 4) || (dco.stu === 2)) {
					dco.ajx.abort();
					dco.ajx.asynPost(dco.url);
				}
			},

			/*挂单列表增加一行*/
			addTd: function (i, o) {
				dco.pt[i] = o;
				o.doe = document.createElement("tr");
				o.p = document.createElement("td");
				o.p.innerHTML = i.toFixed(2);
				o.v = document.createElement("td");
				o.v.innerHTML = o[0] ? Math.floor(o[0] / 100) : "";
				o.m = document.createElement("td");
				o.m.innerHTML = o[2] ? Math.floor(o[2] / 100) : "";
				o.doe.appendChild(o.p);
				o.doe.appendChild(o.v);
				o.doe.appendChild(o.m);

				if (dco.bdb.n < i) {
					do {
						i = Math.round((i - 0.01) * 100) / 100;
					} while (!dco.pt[i]);
					tDom.insertBefore(o.doe, dco.pt[i].doe);
				} else {
					tDom.appendChild(o.doe);
				}
			},

			/*挂单数据清零*/
			clTd: function (i, c) {
				if (dco.pt[i]) {
					dco.pt[i][2] = 0;
					dco.pt[i][3] = 0;
					dco.pt[i].m.innerHTML = "";
				} else {
					dco.addTd(i, [0, (i < c ? 1 : -1), 0, 0, 0]);
				}
			},

			/*数据保存*/
			sav: function () {
				if (dco.stu && dco.id) {
					dco.stop(3);
					if (!dco.bdb.d) {
						dco.bdb.d = dco.db;
					}
					dco.ajx.asynPost(dco.urlS + dco.id + "/" + dco.tim + "/", "dat=" + dco.utJson.toJson(dco.bdb));
				}
			},

			/*变动补偿量*/
			chgCv: function (i, c, flush) {
				var a, n;
				dco.cv[i] = Math.round((dco.cv[i] + c) * 10) / 10;
				a = dco.op.series[i].data;
				n = a.length;
				for (i = 0; i < n; i ++) {
					a[i] = Math.round((a[i] + c) * 1000) / 1000;
				}
				if (flush) {
					dco.chart.setOption(dco.op);
				}
			}
		};

		dco.init();
	</script>
</html>
